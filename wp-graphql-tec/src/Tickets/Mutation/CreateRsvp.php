<?php
/**
 * GraphQL Object Type - CreateRsvp
 *
 * @package WPGraphQL\TEC\Tickets\Mutation
 * @since 0.0.1
 */

namespace WPGraphQL\TEC\Tickets\Mutation;

use GraphQL\Error\UserError;
use GraphQL\Type\Definition\ResolveInfo;
use WPGraphQL\AppContext;
use WPGraphQL\TEC\Tickets\Data\AttendeeHelper;
use WPGraphQL\TEC\Tickets\Type\Input\AttendeeInput;
use WPGraphQL\TEC\Tickets\Type\WPInterface\Attendee;

/**
 * Class - CreateRsvp
 */
class CreateRsvp {

	/**
	 * Mutation name
	 *
	 * @var string Type name.
	 */
	public static $name = 'CreateRsvp';
	/**
	 * {@inheritDoc}
	 */
	public static function register_mutation() : void {
		register_graphql_mutation(
			self::$name,
			[
				'inputFields'         => self::get_input_fields(),
				'outputFields'        => self::get_output_fields(),
				'mutateAndGetPayload' => self::mutate_and_get_payload(),
			]
		);
	}

	/**
	 * Defines the input field configuration.
	 */
	public static function get_input_fields() : array {
		return [
			'ticketId' => [
				'type'        => [ 'non_null' => 'Int' ],
				'description' => __( 'The database ID of the ticket to RSVP for', 'wp-graphql-tec' ),
			],
			'quantity' => [
				'type'        => [ 'non_null' => 'Int' ],
				'description' => __( 'The number of RSVPs to create', 'wp-graphql-tec' ),
			],
			'attendee' => [
				'type'        => [ 'non_null' => AttendeeInput::$type ],
				'description' => __( 'The attendee details. With RSVPs, the attendee details are the same for each ticket.', 'wp-graphql-tec' ),
			],
		];
	}

	/**
	 * Defines the output field configuration.
	 */
	public static function get_output_fields() : array {
		return [
			'errors'      => [
				'type'        => [ 'list_of' => 'String' ],
				'description' => __( 'Errors that occurred while attempting to process the mutation. Null if mutation succeeded.', 'wp-graphql-tec' ),
			],
			'attendeeIds' => [
				'type'        => [ 'list_of' => 'Int' ],
				'description' => __( 'The database IDs of the attendees generated by the mutation.', 'wp-graphql-tec' ),
			],
			'attendees'   => [
				'type'        => [ 'list_of' => 'RsvpAttendee' ],
				'description' => __( 'A list of attendee objects generated by the mutation.', 'wp-graphql-tec' ),
				'resolve'     => function( array $payload, array $args, AppContext $context ) {
					if ( empty( $payload['attendeeIds'] ) || ! empty( $payload['errors'] ) ) {
						return null;
					}

					$attendees = [];

					foreach ( $payload['attendeeIds'] as $attendee_id ) {
						$attendees[] = AttendeeHelper::resolve_object( $attendee_id, $context );
					}

					return $attendees ?: null;
				},
			],
		];
	}


	/**
	 * Defines the data modification closure.
	 */
	public static function mutate_and_get_payload() : callable {
		return function( array $input ) : array {
			$rsvp = tribe( 'tickets.rsvp' );

			if ( ! is_user_logged_in() && $rsvp->login_required() ) {
				return [
					'errors' => [ __( 'You must be logged_in to RSVP for this ticket.', 'wp-graphql-tec' ) ],
				];
			}

			$post_id = (int) get_post_meta( $input['ticketId'], $rsvp->get_event_key(), true );

			if ( 0 === $post_id ) {
				return [
					'errors' => [ __( 'There is no event attached to the ticket.', 'wp-graphql-tec' ) ],
				];
			}

			$ticket = $rsvp->get_ticket( $post_id, $input['ticketId'] );

			$args = [
				'rsvp_id' => $input['ticketId'],
				'post_id' => $post_id,
				'rsvp'    => $ticket,
				'step'    => 'success',
			];

			$_POST['action']        = 'tribe_tickets_rsvp_handle';
			$_POST['ticket_id']     = $args['rsvp_id'];
			$_POST['step']          = $args['step'];
			$_POST['tribe_tickets'] = [
				$args['rsvp_id'] => [
					'ticket_id' => $args['rsvp_id'],
					'attendees' => [
						[
							'order_status' => $input['attendee']['orderStatus'],
							'optout'       => $input['attendee']['shouldHidePublicly'],
							'full_name'    => $input['attendee']['name'],
							'email'        => $input['attendee']['email'],
						],
					],
					'quantity'  => $input['quantity'],
				],
			];

			$result = $rsvp->process_rsvp_step( $args );

			return [
				'errors'      => $result['errors'] ?: null,
				'attendeeIds' => ! empty( $result['opt_in_args']['attendee_ids'] ) ? explode( ',', $result['opt_in_args']['attendee_ids'] ) : null,
			];
		};
	}
}
