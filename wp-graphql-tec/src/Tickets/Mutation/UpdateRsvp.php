<?php
/**
 * GraphQL Object Type - UpdateRsvp
 *
 * @package WPGraphQL\TEC\Tickets\Mutation
 * @since 0.0.1
 */

namespace WPGraphQL\TEC\Tickets\Mutation;

use Tribe__Tickets__Tickets_View;
use WPGraphQL\AppContext;
use WPGraphQL\TEC\Tickets\Data\AttendeeHelper;
use WPGraphQL\TEC\Tickets\Type\Enum\OrderStatusEnum;

/**
 * Class - UpdateRsvp
 */
class UpdateRsvp {

	/**
	 * Mutation name
	 *
	 * @var string Type name.
	 */
	public static $name = 'UpdateRsvp';
	/**
	 * {@inheritDoc}
	 */
	public static function register_mutation() : void {
		register_graphql_mutation(
			self::$name,
			[
				'inputFields'         => self::get_input_fields(),
				'outputFields'        => self::get_output_fields(),
				'mutateAndGetPayload' => self::mutate_and_get_payload(),
			]
		);
	}

	/**
	 * Defines the input field configuration.
	 */
	public static function get_input_fields() : array {
		return [
			'attendeeId'         => [
				'type'        => [ 'non_null' => 'Int' ],
				'description' => __( 'The database ID of the RsvpAttendee to update.', 'wp-graphql-tec' ),
			],
			'rsvpStatus'         => [
				'type'        => 'Rsvp' . OrderStatusEnum::$type,
				'description' => 'The RSVP order status',
			],
			'shouldHidePublicly' => [
				'type'        => 'Boolean',
				'description' => __( 'Whether the attendees should be hidden from public lists', 'wp-graphql-tec' ),
			],
			'name'               => [
				'type'        => 'String',
				'description' => __( 'The name of the attendee', 'wp-graphql-tec' ),
			],
			'email'              => [
				'type'        => 'String',
				'description' => __( 'The emaill address of the attendee attendee', 'wp-graphql-tec' ),
			],
		];
	}

	/**
	 * Defines the output field configuration.
	 */
	public static function get_output_fields() : array {
		return [
			'errors'     => [
				'type'        => [ 'list_of' => 'String' ],
				'description' => __( 'Errors that occurred while attempting to process the mutation. Null if mutation succeeded.', 'wp-graphql-tec' ),
			],
			'attendeeId' => [
				'type'        => 'Int',
				'description' => __( 'The database IDs of the attendees generated by the mutation.', 'wp-graphql-tec' ),
			],
			'attendee'   => [
				'type'        => 'RsvpAttendee',
				'description' => __( 'The updated attendee object.', 'wp-graphql-tec' ),
				'resolve'     => function( array $payload, array $args, AppContext $context ) {
					if ( empty( $payload['attendeeId'] ) || ! empty( $payload['errors'] ) ) {
						return null;
					}

					return AttendeeHelper::resolve_object( $payload['attendeeId'], $context );
				},
			],
		];
	}


	/**
	 * Defines the data modification closure.
	 *
	 * @see tickets.rsvp::update_attendee_data() .
	 */
	public static function mutate_and_get_payload() : callable {
		return function( array $input ) : array {
			// Bail if the user is not logged in.
			if ( ! is_user_logged_in() ) {
				return [
					'errors' => [ __( 'You must be logged in to update attendee data.', 'wp-graphql-tec' ) ],
				];
			}

			$post_id = (int) tribe_tickets_get_event_ids( $input['attendeeId'] )[0];
			if ( 0 === $post_id ) {
				return [
					'errors' => [ __( 'There is no event attached to the ticket.', 'wp-graphql-tec' ) ],
				];
			}

			$user_id      = get_current_user_id();
			$rsvp         = tribe( 'tickets.rsvp' );
			$tickets_view = Tribe__Tickets__Tickets_View::instance();

			$rsvp_attendees    = $tickets_view->get_event_rsvp_attendees( $post_id, $user_id );
			$rsvp_attendee_ids = array_map( 'absint', wp_list_pluck( $rsvp_attendees, 'attendee_id' ) );

			if ( ! in_array( $input['attendeeId'], $rsvp_attendee_ids, true ) ) {
				return [
					'errors' => [ __( 'The attendee ID provided is not associated with the currently logged-in user.', 'wp-graphql-tec' ) ],
				];
			}

			$attendee = [];

			foreach ( $rsvp_attendees as $test_attendee ) {
				if ( $input['attendeeId'] === $test_attendee['attendee_id'] ) {
					$attendee = $test_attendee;
					break;
				}
			}

			if ( ! isset( $attendee['product_id'] ) || $tickets_view->is_rsvp_restricted( $post_id, $attendee['product_id'] ) ) {
				return [
					'errors' => [ __( 'Event RSVPs for this attendee are restricted.', 'wp-graphql-tec' ) ],
				];
			}

			$attendee_data = [];

			if ( ! empty( $input['name'] ) ) {
				$attendee_data['full_name'] = sanitize_text_field( $input['name'] );
			}

			if ( ! empty( $input['email'] ) ) {
				$email = sanitize_email( $input['email'] );
				if ( ! is_email( $email ) ) {
					return [
						'errors' => [ __( 'The email provided is not valid', 'wp-graphql-tec' ) ],
					];
				}

				$attendee_data['email'] = $email;
			}

			if ( isset( $input['shouldHidePublicly'] ) ) {
				$attendee_data['optout'] = (int) tribe_is_truthy( $input['shouldHidePublicly'] );
			}

			if ( isset( $input['rsvpStatus'] ) ) {
				// Check if changing status will cause RSVP to go over capacity.
				$previous_status = get_post_meta( $input['attendeeId'], $rsvp::ATTENDEE_RSVP_KEY, true );

				if ( tribe_is_truthy( $input['rsvpStatus'] ) && in_array( $previous_status, $rsvp->get_statuses_by_action( 'count_not_going' ), true ) ) {
					$capacity  = tribe_tickets_get_capacity( $attendee['product_id'] );
					$sales     = (int) get_post_meta( $attendee['product_id'], 'total_sales', true );
					$unlimited = -1;

					if ( $unlimited !== $capacity && $sales + 1 > $capacity ) {
						return [
							'errors' => [ __( 'Changing this attendee\'s status to `GOING`, would cause the ticket to go over its capacity', 'wp-graphql-tec' ) ],
						];
					}
				}

				$rsvp->update_sales_and_stock_by_order_status( $input['attendeeId'], $input['rsvpStatus'], $attendee['product_id'] );

				$attendee_data['attendee_status'] = $input['rsvpStatus'];
			}

			if ( empty( $attendee_data ) ) {
				return [
					'errors' => [ __( 'There is no attendee data to update!', 'wp-graphql-tec' ) ],
				];
			}

			$result = $rsvp->update_attendee( $input['attendeeId'], $attendee_data );

			return [
				'errors'     => false === $result ? __( 'The Attendee was unable to be updated', 'wp-graphql-tec' ) : null,
				'attendeeId' => false !== $result ? $input['attendeeId'] : null,
			];
		};
	}
}
